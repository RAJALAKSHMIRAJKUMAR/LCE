-- VERSION:0.3 --DATE:04/05/2015 --DESC:ADDED LCE_TENDER_ITEM_PRICE_DETAILS TABLE --DONE BY :RL
-- VERSION0.2 --DATE:30/04/2015 --DESC:ADDED OUT VARIABLE TO RETURN NEW TMID --DONE BY:RL
-- VERSION:0.1 --SDATE:15/04/2015 --EDATE:16/04/2015 --DESC:SP FOR REUSING TENDER TEMPLATE--DONE BY:RL
DROP PROCEDURE IF EXISTS SP_LCE_REUSE_TENDER_TEMPLATE_INSERT;
CREATE PROCEDURE SP_LCE_REUSE_TENDER_TEMPLATE_INSERT(
IN LPTID INTEGER,
IN PROJECT_TITLE VARCHAR(200),
IN START_DATE DATE,
IN CLOSING_DATE DATE,
IN REVISION_NO INTEGER,
IN MAIN_CONTRACTOR VARCHAR(200),
IN ARCHITECT_CONSULTANT VARCHAR(200),
IN ME_CONSULTANT VARCHAR(200),
IN PROJECT_TYPE VARCHAR(50),
IN PRICE_TYPE VARCHAR(50),
IN PREPARED_BY VARCHAR(40),
IN CHECKED_BY VARCHAR(40),
IN APPROVED_BY VARCHAR(40),
IN USERSTAMP VARCHAR(40),
OUT SUCCESSFLAG TEXT,
OUT PROJECT_TITLE_ID INTEGER,
OUT NEW_TMID INTEGER)

BEGIN

	DECLARE PROJECT_ID INTEGER;
	DECLARE PRICE_ID INTEGER;
	DECLARE CHECK_PROJECT_ID INTEGER;

	DECLARE PREPARED_BY_ID INTEGER;
	DECLARE CHECKED_BY_ID INTEGER;
	DECLARE APPROVED_BY_ID INTEGER;
	DECLARE USERSTAMP_ID INTEGER;

	DECLARE TABLE_ROWCOUNT INTEGER;
	DECLARE CURRENTDATE DATE;
	DECLARE CURRENTYEAR INTEGER;
	DECLARE CURRENTYEAR_NO INTEGER;

	DECLARE ERROR_DB_REFNO TEXT;
	DECLARE DB_REF_NO VARCHAR(30);
	DECLARE TENDER_REF_NO VARCHAR(30);	

	DECLARE OLD_TENDER_REF_ID VARCHAR(30);
	DECLARE OLD_TENDER_REF_NO INTEGER;
	DECLARE NEW_TENDER_REF_NO VARCHAR(30);
	DECLARE AUTO_ID TEXT;
	DECLARE FINALE_TENDER_REF_NO VARCHAR(30);

	DECLARE ERROR_MSG TEXT;

	DECLARE OLD_TMID INTEGER;

	DECLARE SYSDATEANDTIME VARCHAR(50);
	DECLARE SYSDATEANDULDID VARCHAR(50);

	DECLARE TEMP_LCE_REUSE_TENDER_TEMPLATE TEXT;
	DECLARE REUSE_TABLE_COUNT INTEGER;
	DECLARE MINID INTEGER;
	DECLARE MAXID INTEGER;
	DECLARE OLD_IPD_ID INTEGER;
	DECLARE NEW_TMDID INTEGER;

-- ROLLBACK COMMAND
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		IF(TEMP_LCE_REUSE_TENDER_TEMPLATE IS NOT NULL) THEN
			SET @DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE = (SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
			PREPARE DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT FROM @DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE;
			EXECUTE DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT;
		END IF;
		IF(SUCCESSFLAG!='') THEN
			SET SUCCESSFLAG = 0;
		END IF;
	END;

	START TRANSACTION;

	SET AUTOCOMMIT=0;

	SET SUCCESSFLAG = '';

-- SUB SP FOR CONVERTING USERSTAMP INTO ULDID
	CALL SP_LCE_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@USER_ID);
	SET USERSTAMP_ID=@USER_ID;

	IF(CHECKED_BY='') THEN
		SET CHECKED_BY=NULL;
	END IF;

	IF(APPROVED_BY='') THEN
		SET APPROVED_BY=NULL;
	END IF;

	SET PROJECT_ID = (SELECT TOP_ID FROM LCE_TYPE_OF_PROJECT WHERE TOP_TYPE = PROJECT_TYPE);

	SET PRICE_ID = (SELECT PT_ID FROM LCE_PRICE_TYPE WHERE PT_TYPE = PRICE_TYPE);

	SET CHECK_PROJECT_ID = (SELECT TOP_ID FROM LCE_PRICE_TYPE WHERE PT_ID = PRICE_ID);

	SET PREPARED_BY_ID = (SELECT ULD_ID FROM LCE_USER_MANAGEMENT WHERE ULD_USERNAME = PREPARED_BY);

	SET CHECKED_BY_ID = (SELECT ULD_ID FROM LCE_USER_MANAGEMENT WHERE ULD_USERNAME = CHECKED_BY);

	SET APPROVED_BY_ID = (SELECT ULD_ID FROM LCE_USER_MANAGEMENT WHERE ULD_USERNAME = APPROVED_BY);

	SET TABLE_ROWCOUNT = (SELECT COUNT(*) FROM LCE_PROJECT_TITLE);

	SET CURRENTDATE = (SELECT CURRENT_DATE());

	SET CURRENTYEAR = (SELECT YEAR(CURRENTDATE));

	SET CURRENTYEAR_NO = (SELECT SUBSTRING(CURRENTYEAR,3,4));

	SET ERROR_DB_REFNO = (SELECT EMC_DATA FROM LCE_ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=27);

	SET DB_REF_NO = (SELECT REPLACE(ERROR_DB_REFNO,'[Y]',CURRENTYEAR_NO));

	SET TENDER_REF_NO = (SELECT SUBSTRING_INDEX(DB_REF_NO,'/',3));

	IF(TABLE_ROWCOUNT > 0) THEN

		SET OLD_TENDER_REF_ID = (SELECT LPT_TENDER_REF_NO FROM LCE_PROJECT_TITLE ORDER BY LPT_ID DESC LIMIT 1);

		SET OLD_TENDER_REF_NO = (SELECT SUBSTRING_INDEX(OLD_TENDER_REF_ID,'/',-1));

		SET NEW_TENDER_REF_NO = OLD_TENDER_REF_NO+1;

		SET @NEWREFLENGTH = (SELECT LENGTH(NEW_TENDER_REF_NO));
						
		IF(@NEWREFLENGTH=1)THEN
			SET AUTO_ID = (SELECT CONCAT('000',NEW_TENDER_REF_NO));
		END IF;

		IF(@NEWREFLENGTH=2)THEN
			SET AUTO_ID = (SELECT CONCAT('00',NEW_TENDER_REF_NO));
		END IF;

		IF(@NEWREFLENGTH=3)THEN
			SET AUTO_ID = (SELECT CONCAT('0',NEW_TENDER_REF_NO));
		END IF;

		IF(@NEWREFLENGTH>=4)THEN
			SET AUTO_ID = NEW_TENDER_REF_NO;
		END IF;

		SET FINALE_TENDER_REF_NO = (SELECT CONCAT(TENDER_REF_NO,'/',AUTO_ID));

	ELSE

		SET FINALE_TENDER_REF_NO = DB_REF_NO;

	END IF;

	IF EXISTS(SELECT LPT_TENDER_REF_NO FROM LCE_PROJECT_TITLE WHERE LPT_TENDER_REF_NO = FINALE_TENDER_REF_NO) THEN

		SET ERROR_MSG = (SELECT EMC_DATA FROM LCE_ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=28);
		SET SUCCESSFLAG = (SELECT REPLACE(ERROR_MSG,'[REFNO]',FINALE_TENDER_REF_NO));

	END IF;

	SET OLD_TMID = (SELECT TM_ID FROM LCE_TENDER_MANAGEMENT WHERE LPT_ID = LPTID AND TM_REV_NO = REVISION_NO);

-- QUERY FOR CREATE DYNAMIC TEMP TABLE	
	SET SYSDATEANDTIME=(SELECT SYSDATE());
	SET SYSDATEANDTIME=(SELECT REPLACE(SYSDATEANDTIME,' ',''));
	SET SYSDATEANDTIME=(SELECT REPLACE(SYSDATEANDTIME,'-',''));
	SET SYSDATEANDTIME=(SELECT REPLACE(SYSDATEANDTIME,':',''));
	SET SYSDATEANDULDID=(SELECT CONCAT(SYSDATEANDTIME,'_',USERSTAMP_ID));

-- QUERY FOR CREATE TEMP_LCE_REUSE_TENDER_TEMPLATE

	SET TEMP_LCE_REUSE_TENDER_TEMPLATE = (SELECT CONCAT('TEMP_LCE_REUSE_TENDER_TEMPLATE','_',SYSDATEANDULDID));
	
	SET @CREATE_TEMP_LCE_REUSE_TENDER_TEMPLATE = (SELECT CONCAT('CREATE TABLE ',TEMP_LCE_REUSE_TENDER_TEMPLATE,'(
	ID INTEGER AUTO_INCREMENT,
	OLD_TM_ID INTEGER,
	NEW_TM_ID INTEGER,
	OLD_TMD_ID INTEGER,
	IPD_ID INTEGER,
	NEW_TMD_ID INTEGER,
	OLD_ULD_ID INTEGER,
	NEW_ULD_ID INTEGER,
	MKID_AUTO_ID INTEGER,
	MKID_DESCRIPTION TEXT,
	PRIMARY KEY(ID))'));
	PREPARE CREATE_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT FROM @CREATE_TEMP_LCE_REUSE_TENDER_TEMPLATE;
	EXECUTE CREATE_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT;

	IF(LPTID IS NOT NULL AND PROJECT_TITLE IS NOT NULL AND START_DATE IS NOT NULL AND CLOSING_DATE IS NOT NULL 
	AND REVISION_NO IS NOT NULL AND MAIN_CONTRACTOR IS NOT NULL AND ARCHITECT_CONSULTANT IS NOT NULL AND ME_CONSULTANT 
	IS NOT NULL AND PROJECT_TYPE IS NOT NULL AND PRICE_TYPE IS NOT NULL AND PREPARED_BY IS NOT NULL AND 
	USERSTAMP IS NOT NULL) THEN

		IF(PROJECT_ID = CHECK_PROJECT_ID AND SUCCESSFLAG='') THEN

-- QUERY TO INSERT VALUES IN TEMP_LCE_REUSE_TENDER_TEMPLATE TABLE FROM LCE_MANUAL_KEY_IN_DETAILS TABLE
			IF EXISTS(SELECT TM_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID = OLD_TMID) THEN
			
				SET @MLLY_INSERT_TEMP_LCE_REUSE_TENDER_TEMPLATE = (SELECT CONCAT('INSERT INTO ',TEMP_LCE_REUSE_TENDER_TEMPLATE,'
				(OLD_TM_ID,OLD_TMD_ID,IPD_ID,OLD_ULD_ID,MKID_AUTO_ID,MKID_DESCRIPTION)
				SELECT TMD.TM_ID,MKID.TMD_ID,TMD.IPD_ID,MKID.ULD_ID,MKID.MKID_ID,MKID.MKID_DESCRIPTION 
				FROM LCE_MANUAL_KEY_IN_DETAILS MKID,LCE_TENDER_SUMMARY_DETAILS TMD WHERE MKID.TMD_ID IN 
				(SELECT TMD_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID= ',OLD_TMID,') AND MKID.TMD_ID=TMD.TMD_ID'));
				PREPARE MLLY_INSERT_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT FROM @MLLY_INSERT_TEMP_LCE_REUSE_TENDER_TEMPLATE;
				EXECUTE MLLY_INSERT_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT;

			END IF;

			SET @REUSETABLECOUNT = (SELECT CONCAT('SELECT COUNT(*) INTO @REUSE_TABLECOUNT FROM ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
			PREPARE REUSETABLECOUNT_STMT FROM @REUSETABLECOUNT;
			EXECUTE REUSETABLECOUNT_STMT;

			SET REUSE_TABLE_COUNT = @REUSE_TABLECOUNT;

-- QUERY TO UPDATE VALUES IN LCE_PROJECT_TITLE TABLE
			IF(LPTID IS NOT NULL AND PROJECT_TITLE IS NOT NULL AND FINALE_TENDER_REF_NO IS NOT NULL AND START_DATE IS NOT NULL AND CLOSING_DATE 
			IS NOT NULL AND USERSTAMP_ID IS NOT NULL) THEN

				INSERT INTO LCE_PROJECT_TITLE(LPT_PROJECT_TITLE,LPT_TENDER_REF_NO,LPT_START_DATE,LPT_CLOSING_DATE,ULD_ID)
				VALUES (PROJECT_TITLE,FINALE_TENDER_REF_NO,START_DATE,CLOSING_DATE,USERSTAMP_ID);

				SET PROJECT_TITLE_ID = (SELECT LPT_ID FROM LCE_PROJECT_TITLE WHERE LPT_PROJECT_TITLE=PROJECT_TITLE);

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_MANAGEMENT TABLE
			INSERT INTO LCE_TENDER_MANAGEMENT(LPT_ID,TM_MAIN_CONTRACTOR,TM_ARCHITECT_CONSULTANT,TM_ME_CONSULTANT,
			TS_ID,TOP_ID,PT_ID,TM_REV_NO,TM_PREPARED_BY,TM_CHECKED_BY,TM_APPROVED_BY,ULD_ID,TM_TIMESTAMP)
			SELECT LPT_ID,TM_MAIN_CONTRACTOR,TM_ARCHITECT_CONSULTANT,TM_ME_CONSULTANT,TS_ID,TOP_ID,PT_ID,TM_REV_NO,TM_PREPARED_BY,
			TM_CHECKED_BY,TM_APPROVED_BY,ULD_ID,TM_TIMESTAMP FROM LCE_TENDER_MANAGEMENT WHERE LPT_ID = LPTID AND TM_REV_NO = REVISION_NO;

			SET NEW_TMID = (SELECT TM_ID FROM LCE_TENDER_MANAGEMENT ORDER BY TM_ID DESC LIMIT 1);

			SET @TMID = NEW_TMID;

-- QUERY TO INSERT VALUES IN LCE_TENDER_ITEM_PRICE_DETAILS

			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = NEW_TMID) THEN

				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = OLD_TMID) THEN
					
					INSERT INTO LCE_TENDER_ITEM_PRICE_DETAILS(TM_ID,TI_ID,TSI_ID,TIPD_CODENO,TIPD_SNO,TIPD_DESCRIPTION,ULD_ID)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),TI_ID,TSI_ID,TIPD_CODENO,TIPD_SNO,TIPD_DESCRIPTION,REPLACE(ULD_ID,ULD_ID,@USER_ID)
					FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = OLD_TMID;
					
				END IF;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_ITEM_PRICE_DETAILS TABLE
			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = NEW_TMID) THEN

				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = OLD_TMID) THEN

					INSERT INTO LCE_TENDER_ITEM_PRICE_DETAILS(TM_ID,TI_ID,TSI_ID,TIPD_CODENO,TIPD_SNO,TIPD_DESCRIPTION,ULD_ID)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),TI_ID,TSI_ID,TIPD_CODENO,TIPD_SNO,TIPD_DESCRIPTION,REPLACE(ULD_ID,ULD_ID,@USER_ID)
					FROM LCE_TENDER_ITEM_PRICE_DETAILS WHERE TM_ID = OLD_TMID;

				END IF;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_CHECKLIST TABLE
			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_CHECKLIST WHERE TM_ID = NEW_TMID) THEN

				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_CHECKLIST WHERE TM_ID = OLD_TMID) THEN
					
					INSERT INTO LCE_TENDER_CHECKLIST(TM_ID,CL_ID,TC_FLAG,TC_OTHER_DETAILS,TC_REMARKS,ULD_ID,TC_PREPARED_BY)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),CL_ID,TC_FLAG,TC_OTHER_DETAILS,TC_REMARKS,REPLACE(ULD_ID,ULD_ID,@USER_ID),
					TC_PREPARED_BY FROM LCE_TENDER_CHECKLIST WHERE TM_ID = OLD_TMID;
					
				END IF;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_FILE_TEMPLATE_DETAILS TABLE

			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_FILE_TEMPLATE_DETAILS WHERE TM_ID = NEW_TMID) THEN
			
				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_FILE_TEMPLATE_DETAILS WHERE TM_ID = OLD_TMID) THEN
					
					INSERT INTO LCE_TENDER_FILE_TEMPLATE_DETAILS(TM_ID,FT_ID,TFTD_FLAG,ULD_ID)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),FT_ID,TFTD_FLAG,REPLACE(ULD_ID,ULD_ID,@USER_ID) FROM 
					LCE_TENDER_FILE_TEMPLATE_DETAILS WHERE TM_ID = OLD_TMID;
					
				END IF;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_SUMMARY_DETAILS TABLE

			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID = NEW_TMID) THEN
				
				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID = OLD_TMID) THEN
					
					INSERT INTO LCE_TENDER_SUMMARY_DETAILS(TM_ID,IPD_ID,TMD_QUANTITY,TMD_UNIT_RATE,TMD_CPF,
					TMD_MATERIAL_COST,TMD_WIRING_COST,TMD_LABOUR_COST,CT_ID,AR_ID,ID_ID,PF_ID,IB_ID,TMD_FROM_LOCATION,
					TMD_TO_LOCATION,TMD_MARK_DOWN,TMD_TENDER_MATERIAL_COST,TMD_TENDER_WIRING_COST,TMD_TENDER_LABOUR_COST,
					TMD_BASE_PRICE,TMD_TENDER_PRICE,TMD_COST_TRANSFER,TMD_AFTER_TRANSFER,TMD_REMARKS,ULD_ID,TIPD_ID)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),IPD_ID,TMD_QUANTITY,TMD_UNIT_RATE,TMD_CPF,TMD_MATERIAL_COST,
					TMD_WIRING_COST,TMD_LABOUR_COST,CT_ID,AR_ID,ID_ID,PF_ID,IB_ID,TMD_FROM_LOCATION,TMD_TO_LOCATION,
					TMD_MARK_DOWN,TMD_TENDER_MATERIAL_COST,TMD_TENDER_WIRING_COST,TMD_TENDER_LABOUR_COST,
					TMD_BASE_PRICE,TMD_TENDER_PRICE,TMD_COST_TRANSFER,TMD_AFTER_TRANSFER,TMD_REMARKS,
					REPLACE(ULD_ID,ULD_ID,@USER_ID),TIPD_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID = OLD_TMID;

					UPDATE LCE_TENDER_SUMMARY_DETAILS TMD,LCE_TENDER_ITEM_PRICE_DETAILS T1,LCE_TENDER_ITEM_PRICE_DETAILS T2 SET TMD.TIPD_ID=T2.TIPD_ID
					WHERE T1.TM_ID=OLD_TMID AND T2.TM_ID=NEW_TMID AND T1.TIPD_SNO=T2.TIPD_SNO AND T1.TIPD_ID=TMD.TIPD_ID AND TMD.TM_ID=NEW_TMID;
					
				END IF;

			END IF;

			IF(REUSE_TABLE_COUNT > 0) THEN

				SET @TMID_UPDATEQUERY = (SELECT CONCAT('UPDATE ',TEMP_LCE_REUSE_TENDER_TEMPLATE,' SET NEW_TM_ID=',NEW_TMID,' WHERE OLD_TM_ID IS NOT NULL'));
				PREPARE TMID_UPDATEQUERY_STMT FROM @TMID_UPDATEQUERY;
				EXECUTE TMID_UPDATEQUERY_STMT;

				SET @ULDID_UPDATEQUERY = (SELECT CONCAT('UPDATE ',TEMP_LCE_REUSE_TENDER_TEMPLATE,' SET NEW_ULD_ID=',USERSTAMP_ID,' WHERE OLD_ULD_ID IS NOT NULL'));
				PREPARE ULDID_UPDATEQUERY_STMT FROM @ULDID_UPDATEQUERY;
				EXECUTE ULDID_UPDATEQUERY_STMT;

				SET @MINIMUMID = (SELECT CONCAT('SELECT MIN(ID) INTO @MIN_ID FROM ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
				PREPARE MINIMUMID_STMT FROM @MINIMUMID;
				EXECUTE MINIMUMID_STMT;

				SET @MAXIMUMID = (SELECT CONCAT('SELECT MAX(ID) INTO @MAX_ID FROM ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
				PREPARE MAXIMUMID_STMT FROM @MAXIMUMID;
				EXECUTE MAXIMUMID_STMT;

				SET MINID = @MIN_ID;
				SET MAXID = @MAX_ID;

				WHILE(MINID <= MAXID) DO 

					SET @OLDIPDID = (SELECT CONCAT('SELECT IPD_ID INTO @OLD_IPDID FROM ',TEMP_LCE_REUSE_TENDER_TEMPLATE,' WHERE ID = ',MINID,''));
					PREPARE OLDIPDID_STMT FROM @OLDIPDID;
					EXECUTE OLDIPDID_STMT;

					SET OLD_IPD_ID = @OLD_IPDID;

					SET NEW_TMDID = (SELECT TMD_ID FROM LCE_TENDER_SUMMARY_DETAILS WHERE TM_ID=NEW_TMID AND IPD_ID=OLD_IPD_ID);

					SET @UPDATE_TMDID = (SELECT CONCAT('UPDATE ',TEMP_LCE_REUSE_TENDER_TEMPLATE,' SET NEW_TMD_ID=',NEW_TMDID,'
					WHERE ID = ',MINID,''));
					PREPARE UPDATE_TMDID_STMT FROM @UPDATE_TMDID;
					EXECUTE UPDATE_TMDID_STMT;

				SET MINID = MINID+1;

				END WHILE;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_MANUAL_KEY_IN_DETAILS TABLE

			IF(REUSE_TABLE_COUNT > 0) THEN

				SET @INSERT_MKIN_DTLS = (SELECT CONCAT('INSERT INTO LCE_MANUAL_KEY_IN_DETAILS (TMD_ID,MKID_DESCRIPTION,ULD_ID)
				SELECT NEW_TMD_ID,MKID_DESCRIPTION,NEW_ULD_ID FROM ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
				PREPARE INSERT_MKIN_DTLS_STMT FROM @INSERT_MKIN_DTLS;
				EXECUTE INSERT_MKIN_DTLS_STMT;

			END IF;

-- QUERY TO INSERT VALUES IN LCE_TENDER_SUB_TOTAL TABLE

			IF NOT EXISTS(SELECT TM_ID FROM LCE_TENDER_SUB_TOTAL WHERE TM_ID = NEW_TMID) THEN
				
				IF EXISTS(SELECT TM_ID FROM LCE_TENDER_SUB_TOTAL WHERE TM_ID = OLD_TMID) THEN

					INSERT INTO LCE_TENDER_SUB_TOTAL(TM_ID,TI_ID,TSI_ID,TST_TENDER_PRICE,TST_COST_TRANSFER,TST_AFTER_TRANSFER,ULD_ID)
					SELECT REPLACE(TM_ID,TM_ID,@TMID),TI_ID,TSI_ID,TST_TENDER_PRICE,TST_COST_TRANSFER,TST_AFTER_TRANSFER,REPLACE(ULD_ID,ULD_ID,@USER_ID) 
					FROM LCE_TENDER_SUB_TOTAL WHERE TM_ID = OLD_TMID;

				END IF;

			END IF;

			IF EXISTS(SELECT TM_ID FROM LCE_TENDER_MANAGEMENT WHERE TM_ID = NEW_TMID) THEN

				UPDATE LCE_TENDER_MANAGEMENT SET LPT_ID=PROJECT_TITLE_ID,TM_MAIN_CONTRACTOR = MAIN_CONTRACTOR,TM_ARCHITECT_CONSULTANT = ARCHITECT_CONSULTANT,
				TM_ME_CONSULTANT = ME_CONSULTANT,TS_ID=1,TOP_ID = PROJECT_ID,PT_ID = PRICE_ID,TM_REV_NO = 0,TM_PREPARED_BY = PREPARED_BY_ID,
				TM_CHECKED_BY = CHECKED_BY_ID,TM_APPROVED_BY = APPROVED_BY_ID,ULD_ID = USERSTAMP_ID WHERE TM_ID=NEW_TMID;

			END IF;

			SET SUCCESSFLAG = 1;

		END IF;

	END IF;
				
	IF(TEMP_LCE_REUSE_TENDER_TEMPLATE IS NOT NULL) THEN
		SET @DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE = (SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_LCE_REUSE_TENDER_TEMPLATE,''));
		PREPARE DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT FROM @DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE;
		EXECUTE DROP_TEMP_LCE_REUSE_TENDER_TEMPLATE_STMT;
	END IF;

COMMIT;

END;